/alternate-career-planner/src/components/ProgressBar/ProgressBar.css
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400  1) /* ProgressBar.css
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400  2)  * Description: Contains css styling for
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400  3)  * the progress bar.
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400  4)  */
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400  5) 
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400  6) {
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400  7)     margin: 0;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400  8)     box-sizing: border-box;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400  9)     background-color: #eef6f8;
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 10) }
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 11) 
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 12) body {
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 13)     display: flex;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 14)     justify-content: center;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 15)     align-items: center;
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 16) }
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 17) 
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 18) .container{
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 19)     width: 200px;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 20)     margin-top: 20px;
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 21) }
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 22) 
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 23) .progress-bar{
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 24)     width: 400px;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 25)     height: 30px;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 26)     border-radius: 10px;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 27)     background-color: #e6e6e6;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 28)     margin-bottom: 10px;
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 29) }
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 30) 
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 31) .progress-bar-fill {
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 32)     height: 100%;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 33)     border-radius: 10px;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 34)     background-color: #2ecc71;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 35)     transition: width 0.5s ease-out;
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 36) }
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 37) 
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 38) .progress-label {
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 39)     margin-top: 10px;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 40)     font-size: 24px;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 41)     font_weight: bold;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 42)     color: #444444;
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 43) }
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 44) 
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 45) .button {
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 46)     background_color: rgb(10, 110, 171);
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 47)     border-radius: 6px;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 48)     border: 0;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 49)     box-sizing: border-box;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 50)     color: #eee;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 51)     cursor: pointer;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 52)     font-size: 18px;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 53)     height: 40px;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 54)     outline: 0;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 55)     text-align: center;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 56)     margin-right: 10px;
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 57)     margin-top: 15px;
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 58) }

/alternate-career-planner/src/components/ProgressBar/ProgressBar.js
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400  1) /* ProgressBar.js
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400  2)  * Description: Creates a progress bar
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400  3)  * that increments on button press.
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400  4)  */
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400  5) 
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400  6) import React, { useState } from "react";
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400  7) 
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400  8) export const ProgressBar = () => {
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400  9)     const [progress, setProgress] = useState(0);
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 10)     // Increments progress by 20% on button press
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 11)     const handleButtonClick = ()=>{
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 12)         if (progress < 100) {
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 13)             setProgress(progress + 20);
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 14)         }
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 15)     }
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 16) 
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 17)     // Resets progress on button press
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 18)     const handleButtonReset = () => {
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 19)         setProgress(0);
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 20)     }
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 21) 
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 22)     const getColor = () => {
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 23)         return "#ff8200";
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 24)     }
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 25) 
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 26)     return <div className="container">
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 27)         <div className="progress-bar">
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 28)             <div 
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 29)                 className="progress-bar-fill" 
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 30)                 // Width of progress bar increases as progress increases
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 31)                 style={{ width: `${progress}%`,
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 32)                                  backgroundColor: getColor() }}
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 33)             >
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 34)                 {" "}
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 35)             </div>
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 36)         </div>
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 37)         <div className="progress-label">{progress}%</div>
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 38)         <button onClick={handleButtonClick}>Progress</button>
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 39)         <button onClick={handleButtonReset}>Reset</button>
f5cb0ea5 (Ryan Perry 2024-10-03 02:22:08 -0400 40)     </div>;
ab9ddf96 (Ryan Perry 2024-10-03 02:13:38 -0400 41) };

/alternate-career-planner/src/views/CompletedCoursesView/CompletedCoursesView.css
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400  1) /* CompletedCoursesView.css
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400  2)  * Description: CSS styling for CompletedCoursesView
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400  3)  */
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400  4) 
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400  5) {
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400  6)     margin: 0;
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400  7)     box-sizing: border-box;
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400  8)     background-color: #eef6f8;
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400  9) }
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400 10) 
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400 11) body {
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400 12)     display: flex;
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400 13)     justify-content: center;
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400 14)     align-items: center;
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400 15) }
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400 16) 
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400 17) .course-preview:hover {
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400 18)     box-shadow: 1px 3px 5px rgba(0,0,0,0.1);
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400 19) }
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400 20) 

/alternate-career-planner/src/views/CompletedCoursesView/CompletedCoursesView.js
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400  1) /* CompletedCoursesView.js
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400  2)  * Description: Displays a student's current
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400  3)  * progress through their declared major.
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400  4)  */
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400  5) 
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400  6) import React from 'react';
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400  7) import './CompletedCoursesView.css';
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400  8) import ProgressBar from '../../components/ProgressBar/ProgressBar';
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400  9) 
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400 10) const CompletedCoursesView (){
2873fca8 (Ryan Perry 2024-10-03 03:41:50 -0400 11)     // Dummy data
2873fca8 (Ryan Perry 2024-10-03 03:41:50 -0400 12)     const [courses, setCourses] = useState([
2873fca8 (Ryan Perry 2024-10-03 03:41:50 -0400 13)         { title: 'Computer Organization', body: 'description...',
2873fca8 (Ryan Perry 2024-10-03 03:41:50 -0400 14)             grade: 'A', courseID: 'COSC230', hours: 3 },
2873fca8 (Ryan Perry 2024-10-03 03:41:50 -0400 15)         { title: 'Software Engineering', body: 'description...',
2873fca8 (Ryan Perry 2024-10-03 03:41:50 -0400 16)             grade: 'A', courseID: 'COSC340', hours: 3 },
2873fca8 (Ryan Perry 2024-10-03 03:41:50 -0400 17)         { title: 'Algorithm Analysis and Automata', body: 'description...',
2873fca8 (Ryan Perry 2024-10-03 03:41:50 -0400 18)             grade: 'A', courseID: 'COSC312', hours: 3 }
2873fca8 (Ryan Perry 2024-10-03 03:41:50 -0400 19)     ]);
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400 20) 
2873fca8 (Ryan Perry 2024-10-03 03:41:50 -0400 21)     return (
2873fca8 (Ryan Perry 2024-10-03 03:41:50 -0400 22)         <div className="App">
2873fca8 (Ryan Perry 2024-10-03 03:41:50 -0400 23)             <h1>Progress Through Declared Major</h1>
2873fca8 (Ryan Perry 2024-10-03 03:41:50 -0400 24)             <ProgressBar/>
2873fca8 (Ryan Perry 2024-10-03 03:41:50 -0400 25)             {courses.map((course) => (
2873fca8 (Ryan Perry 2024-10-03 03:41:50 -0400 26)                 <div className="course-preview" key={course.courseID}>
2873fca8 (Ryan Perry 2024-10-03 03:41:50 -0400 27)                     <h2>{ course.courseID }: { course.title }</h2>
2873fca8 (Ryan Perry 2024-10-03 03:41:50 -0400 28)                     <h3>{ course.body }</h3>
2873fca8 (Ryan Perry 2024-10-03 03:41:50 -0400 29)                     <p>Grade: { course.grade }</p>
2873fca8 (Ryan Perry 2024-10-03 03:41:50 -0400 30)                     <p>Credit Hours: { course.hours }</p>
2873fca8 (Ryan Perry 2024-10-03 03:41:50 -0400 31)                 </div>
2873fca8 (Ryan Perry 2024-10-03 03:41:50 -0400 32)             ))}
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400 33)         </div>
2873fca8 (Ryan Perry 2024-10-03 03:41:50 -0400 34)     );
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400 35) }
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400 36) 
764b6589 (Ryan Perry 2024-10-03 03:31:22 -0400 37) export default CompletedCoursesView;

/c_parsing/README.md
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 1) # Academic History Parsing
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 2) ## Overview
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 3) * This program parses a student's academic history HTML file and extracts the course code, credit hours, grade, course title, and status for each class the student has taken or is taking.
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 4) ## Usage
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 5) * This program can be compiled using g++. The user must provide an academic history HTML file on the command line. To obtain this file, run a DARS report online via MyUTK. Select the Course History tab. Right click the Course History Table and select Save As. Be sure to save as type Webpage, HTML Only.

/c_parsing/main.cpp
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  1) #include <iostream>
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  2) #include <vector>
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  3) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  4) #include "parsing.h"
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  5) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  6) int main(int argc, char *argv[]) {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  7)     if (argc != 2) {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  8)         std::cerr << "Usage: " << argv[0] << " academic_history.html"
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  9)                   << std::endl;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 10)         return -1;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 11)     } 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 12) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 13)     Course course; 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 14) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 15)     std::vector<Course> courses_taken = ReadCourseInfo(argv[1], course); 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 16) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 17)     for (int i = 0; i < (int) courses_taken.size(); i++) {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 18)         Course current = courses_taken[i];
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 19)         std::cout << "Title: " << current.get_title()
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 20)                   << "\nCourse Code: " << current.get_course_code()
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 21)                   << "\nCredit Hours: " <<  current.get_credit_hours()
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 22)                   << "\nGrade: " << current.get_grade()
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 23)                   << "\n\n";
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 24)     }
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 25) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 26)     return 0;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 27) }

/c_parsing/parsing.cpp
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400   1) #include <iostream>
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400   2) #include <cctype>
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400   3) #include <sstream>
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400   4) #include <algorithm>
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400   5) #include <fstream>
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400   6) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400   7) #include "parsing.h"
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400   8) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400   9) /*
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  10)  * Returns a Course's course code.
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  11)  */
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  12) std::string Course::
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  13) get_course_code()
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  14) {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  15)     return course_code;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  16) }
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  17) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  18) /*
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  19)  * Returns a Course's credit hours.
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  20)  */
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  21) int Course::
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  22) get_credit_hours()
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  23) {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  24)     return credit_hours;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  25) }
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  26) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  27) /*
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  28)  * Returns a Course's grade.
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  29)  */
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  30) std::string Course::
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  31) get_grade()
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  32) {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  33)     return grade;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  34) }
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  35) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  36) /*
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  37)  * Returns a Course's title.
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  38)  */
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  39) std::string Course::
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  40) get_title()
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  41) {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  42)     return title;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  43) }
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  44) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  45) /*
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  46)  * Sets a Courses's member variables given 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  47)  * an unformatted course block.
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  48)  */
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  49) void Course::
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  50) set_course_info(std::string course_block)
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  51) {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  52)     std::istringstream stream(course_block);
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  53)     std::string line, course_code, grade, title;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  54)     int credit_hours = 0; 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  55) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  56)     for (int i = 1; i < 30; i++) {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  57)         getline(stream, line);
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  58) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  59)         if (i == 14) {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  60)             // Course codes are stored on line 14 of every course block.
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  61)             course_code = TrimWhiteSpace(line);
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  62)             this->course_code = course_code;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  63)         } else if (i == 19) {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  64)             // Course credit hours are stored on line 19 of every course block.
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  65)             std::string credit_hours_str = TrimWhiteSpace(line);
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  66)             credit_hours = std::stoi(credit_hours_str);
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  67)             this->credit_hours = credit_hours;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  68)         } else if (i == 24) {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  69)             // Course grades are stored on line 24 of every course block.
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  70)             grade = TrimWhiteSpace(line);
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  71)             this->grade = grade;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  72)         } else if (i == 29) {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  73)             /*
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  74)              * Course titles are stored on line 29 of every course block. 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  75)              * For titles, only remove leading whitespace so that 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  76)              * there are spaces between words.
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  77)              */
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  78)             std::string::iterator start;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  79)             start = std::find_if(line.begin(), line.end(), [](unsigned char c) {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  80)                                      return !std::isspace(c); 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  81)                                  });
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  82)             line.erase(line.begin(), start);
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  83) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  84)             this->title = line;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  85)         } 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  86)     } 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  87) }
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  88) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  89) /*
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  90)  * This function reads the academic history HTML and stores all
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  91)  * the courses the student has completed or is taking.
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  92)  */
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  93) std::vector<Course>
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  94) ReadCourseInfo(char * academic_history_html, Course course)
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  95) {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  96)     std::ifstream academic_history;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  97)     academic_history.open(academic_history_html);
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  98)     if (!academic_history.is_open()) {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  99)         perror(academic_history_html);
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 100)         exit(1);
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 101)     } 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 102) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 103)     std::vector<Course> courses_taken;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 104)     std::string line, course_block;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 105) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 106)     std::string start_delim_even = "class=\"even\">";
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 107)     std::string start_delim_odd = "class=\"odd\">";
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 108) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 109)     while(getline(academic_history, line)) {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 110)         // Check if line contains a start delimiter
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 111)         if (line.find(start_delim_even) != std::string::npos ||
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 112)             line.find(start_delim_odd) != std::string::npos) {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 113)             // Store the next 30 lines in course_block
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 114)             course_block = line + "\n";
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 115)             for (int i = 0; i < 30; i++) {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 116)                 if (getline(academic_history, line)) {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 117)                     course_block += line + "\n";
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 118)                 } else {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 119)                     break; // break at end of file
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 120)                 }
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 121)             }
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 122)             course.set_course_info(course_block);
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 123)             courses_taken.push_back(course);
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 124)         }
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 125)     }
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 126)     academic_history.close();
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 127) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 128)     return courses_taken;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 129) }
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 130) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 131) /*
5b4cc87b (Ryan Perry 2024-10-02 19:22:23 -0400 132)  * This function removes all whitespace from a string.
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 133)  */
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 134) std::string
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 135) TrimWhiteSpace(std::string &str)
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 136) {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 137)     str.erase(std::remove_if(str.begin(), str.end(), ::isspace),
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 138)               str.end()); 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 139) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 140)     return str;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 141) }

/c_parsing/parsing.h
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  1) #ifndef PARSING_H
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  2) #define PARSING_H
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  3) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  4) class Course {
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  5)     private:
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  6)         std::string course_code;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  7)         int credit_hours;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  8)         std::string grade;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400  9)         std::string title;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 10)     public:
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 11)         Course() = default;
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 12) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 13)         std::string get_course_code();
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 14)         int         get_credit_hours();
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 15)         std::string get_grade();
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 16)         std::string get_title();
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 17) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 18)         void set_course_info(std::string);
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 19) };
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 20) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 21) std::vector<Course> ReadCourseInfo(char *, Course);
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 22) std::string TrimWhiteSpace(std::string &);
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 23) 
483a03b3 (Ryan Perry 2024-10-02 19:20:00 -0400 24) #endif
/alternate-career-planner/src/views/CompletedCoursesView/CompletedCoursesView.js
6d25d59e (Ryan Perry       2024-10-10 08:01:01 -0400 10) const CompletedCoursesView = () => {

/alternate-career-planner/src/App.js
0b207361 (Ryan Perry       2024-10-16 13:48:54 -0400  2) import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';
0b207361 (Ryan Perry       2024-10-16 13:48:54 -0400  3) 
617a70a2 (Ryan Perry       2024-10-16 21:26:07 -0400  5) import RealHeader from './components/RealHeader/RealHeader';
0b207361 (Ryan Perry       2024-10-16 13:48:54 -0400  6) import Home from './views/Home/Home';
0b207361 (Ryan Perry       2024-10-16 13:48:54 -0400  7) import Quiz from './views/Quiz/Quiz';
0b207361 (Ryan Perry       2024-10-16 13:48:54 -0400 31)       <Router>
617a70a2 (Ryan Perry       2024-10-16 21:26:07 -0400 32)           <RealHeader />
0b207361 (Ryan Perry       2024-10-16 13:48:54 -0400 34)           <Routes>
0b207361 (Ryan Perry       2024-10-16 13:48:54 -0400 35)               <Route path="/" element={<Home />} />
0b207361 (Ryan Perry       2024-10-16 13:48:54 -0400 36)               <Route path="/quiz" element={<Quiz />} />
0b207361 (Ryan Perry       2024-10-16 13:48:54 -0400 37)           </Routes>
0b207361 (Ryan Perry       2024-10-16 13:48:54 -0400 38)       </Router>

/alternate-career-planner/src/components/ImageSlider/ImageSlider.js
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400   1) /* ImageSlider.js
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400   2)  * Description: Image Slider Component. Displays a sequence of 
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400   3)  * images and their descriptions that the user can scroll through
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400   4)  */
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400   5) 
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400   6) import { useState } from 'react';
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400   7) 
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400   8) const ImageSlider = ({slides}) => {
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400   9)     const [currentIndex, setCurrentIndex] = useState(0);
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  10) 
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  11)     const sliderStyles = {
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  12)       position: 'relative',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  13)       height: '100%',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  14)     };
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  15) 
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  16)     const slideStyles = {
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  17)         width: '100%',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  18)         height: '100%',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  19)         borderRadius: '10px',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  20)         backgroundSize: 'cover',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  21)         backgroundPosition: 'center',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  22)         backgroundImage: `url(${slides[currentIndex].url})`
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  23)     };
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  24) 
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  25)     const rightArrowStyles = {
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  26)         position: 'absolute',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  27)         top: '50%',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  28)         transform: 'translate(0, -50%)',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  29)         right: '-45px',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  30)         fontSize: '45px',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  31)         color: '#FF8200',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  32)         zIndex: 1,
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  33)         cursor: "pointer"
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  34)     };
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  35)   
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  36)     const leftArrowStyles = {
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  37)         position: 'absolute',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  38)         top: '50%',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  39)         transform: 'translate(0, -50%)',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  40)         left: '-45px',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  41)         fontSize: '45px',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  42)         color: '#FF8200',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  43)         zIndex: 1,
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  44)         cursor: "pointer"
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  45)     };
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  46) 
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  47)     const checksContainerStyles = {
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  48)         justifyContent: 'center',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  49)     };
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  50) 
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  51)     const itemStyles = {
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  52)         display: 'flex',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  53)         alignItems: 'center',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  54)         margin: '15px 0',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  55)         cursor: 'pointer',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  56)         fontSize: '24px'
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  57)     };
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  58) 
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  59)     const checksStyles = {
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  60)       marginRight: '15px',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  61)       cursor: 'pointer',
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  62)       fontSize: '24px'
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  63)     };
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  64) 
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  65)     const titleStyles = (isActive) => ({
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  66)         fontWeight: isActive ? 'bold' : 'normal'
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  67)     })
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  68) 
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  69)     const goToSlide = slideIndex => {
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  70)         setCurrentIndex(slideIndex);
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  71)     }
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  72)     
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  73)     const goToPrevious = () => {
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  74)         const isFirstslide = currentIndex === 0;
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  75)         const newIndex = isFirstslide ? slides.length - 1 : currentIndex - 1;
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  76)         setCurrentIndex(newIndex);
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  77)     }
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  78) 
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  79)     const goToNext = () => {
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  80)        const isLastSlide = currentIndex === slides.length - 1;
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  81)        const newIndex = isLastSlide ? 0 : currentIndex + 1;
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  82)        setCurrentIndex(newIndex);
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  83)     }
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  84) 
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  85)     return (
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  86)         <div style={sliderStyles}>
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  87)             <div style={leftArrowStyles} onClick={goToPrevious}>❰</div>
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  88)             <div style={rightArrowStyles} onClick={goToNext}>❱</div>
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  89)             <div style={slideStyles}></div>
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  90)             <div style={checksContainerStyles}>
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  91)                 <h2>How to Download Your Academic History File:</h2>
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  92)                 {slides.map((slide, slideIndex) => (
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  93)                     <div 
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  94)                         key={slideIndex}
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  95)                         style={itemStyles} 
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  96)                         onClick={() => goToSlide(slideIndex)}
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  97)                     >
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  98)                         <span style={checksStyles}>✅</span>
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400  99)                         <span style={titleStyles(slideIndex === currentIndex)}>
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400 100)                             {slide.title}
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400 101)                         </span>
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400 102)                     </div>
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400 103)                 ))}
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400 104)             </div>
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400 105)         </div>
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400 106)     )
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400 107) };
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400 108) 
dc095801 (Ryan Perry 2024-10-17 03:38:53 -0400 109) export default ImageSlider;

/alternate-career-planner/src/components/QuizComp/QuizComp.js
dd99aba2 (Ryan Perry 2024-10-16 19:55:34 -0400   1) /* QuizComp.js
dd99aba2 (Ryan Perry 2024-10-16 19:55:34 -0400   2)  * Description: Implements Quiz Component used on the quiz screen.
dd99aba2 (Ryan Perry 2024-10-16 19:55:34 -0400   3)  * Users answer questions from quiszdata.js. Their answers are displayed
dd99aba2 (Ryan Perry 2024-10-16 19:55:34 -0400   4)  * after finishing the quiz.
dd99aba2 (Ryan Perry 2024-10-16 19:55:34 -0400   5)  */
dd99aba2 (Ryan Perry 2024-10-16 19:55:34 -0400   6) 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400   7) import React, { Component } from 'react'
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400   8) import { QuizData } from './quizdata.js'
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400   9) import { Link } from 'react-router-dom'
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  10) 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  11) export class QuizComp extends Component {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  12)   
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  13)     state = {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  14)         currentIndex: 0,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  15)         options: [],
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  16)         score: 0,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  17)         disabled: true,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  18)         quizEnd: false,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  19)         userAnswer: null,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  20)         userAnswers: []
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  21)     }
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  22) 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  23)     loadQuiz = () => {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  24)         const {currentIndex} = this.state
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  25)         this.setState(() => {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  26)             return {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  27)                 question: QuizData[currentIndex].question,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  28)                 options: QuizData[currentIndex].options,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  29)             }
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  30)         })
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  31)     }
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  32) 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  33)     checkAnswer = (selectedAnswer) => {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  34)         this.setState({
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  35)             userAnswer: selectedAnswer,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  36)             disabled: false
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  37)         })
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  38)     }
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  39) 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  40)     nextQuestionHandler = () => {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  41)         const {userAnswer, score, userAnswers, currentIndex} 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  42)             = this.state;
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  43)         userAnswers[currentIndex] = userAnswer
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  44)         this.setState ({
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  45)             currentIndex: this.state.currentIndex + 1,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  46)             userAnswer: null,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  47)             disabled: true,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  48)             userAnswers: userAnswers
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  49)         })
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  50)     }
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  51) 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  52)     prevQuestionHandler = () => {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  53)         this.setState ({
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  54)             currentIndex: this.state.currentIndex - 1,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  55)             userAnswer: null,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  56)             disabled: true 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  57)         }) 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  58)     }
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  59) 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  60)     finishHandler = () => {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  61)         const {userAnswer, score, userAnswers, currentIndex} 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  62)             = this.state;
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  63)         userAnswers[currentIndex] = userAnswer
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  64) 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  65)         this.setState({
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  66)             quizEnd: true,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  67)             userAnswers: userAnswers    
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  68)         })
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  69)     }
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  70) 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  71)     componentDidMount() {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  72)         this.loadQuiz();
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  73)     }
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  74) 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  75)     componentDidUpdate(prevProps, prevState) {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  76)         const {currentIndex} = this.state
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  77) 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  78)         if (this.state.currentIndex !== prevState.currentIndex) {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  79)             this.setState(() => {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  80)                 return {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  81)                     question: QuizData[currentIndex].question,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  82)                     options: QuizData[currentIndex].options,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  83)                 }
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  84)             })
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  85)            
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  86)         }
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  87)     }
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  88) 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  89)     render() {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  90)           const {question, options, currentIndex, userAnswer, quizEnd,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  91)                  userAnswers} = this.state
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  92)           
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  93)           if (quizEnd) {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  94)               return (
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  95)                   <div>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  96)                       <h2>You finished the quiz!</h2>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  97)                       <p>Here's how you answered:</p>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  98) 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  99)                       <ul>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 100)                           {QuizData.map((item, index) => (
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 101)                               <li key={index}>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 102)                                   <strong>Q: {item.question}</strong>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 103)                                   <br />
b9fb604a (Ryan Perry 2024-10-16 21:26:41 -0400 104)                                   {userAnswers[index]}
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 105)                               </li>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 106)                           ))}
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 107)                       </ul>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 108)                       
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 109)                       <div className='buttons'>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 110)                           <Link to='/'>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 111)                               <button className='upload-button'>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 112)                                   Return Home
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 113)                               </button>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 114)                           </Link>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 115) 
b9fb604a (Ryan Perry 2024-10-16 21:26:41 -0400 116)                           <button className='quiz-button'
b9fb604a (Ryan Perry 2024-10-16 21:26:41 -0400 117)                             onClick={() => window.location.reload()}>
b9fb604a (Ryan Perry 2024-10-16 21:26:41 -0400 118)                               Retake Quiz
b9fb604a (Ryan Perry 2024-10-16 21:26:41 -0400 119)                           </button>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 120)                       </div>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 121)                   </div>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 122)               )
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 123)           }
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 124) 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 125)           return (
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 126)               <div>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 127)                   <h2>{question}</h2>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 128)                   <h4>{`Question ${currentIndex+1} of 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 129)                        ${QuizData.length}`}</h4>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 130)                   
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 131)                   {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 132)                       options !== null? options.map(option =>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 133)                           <p key={option.id} className={`options 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 134)                           ${userAnswer == option?  "selected": null}`}
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 135)                           onClick={() => this.checkAnswer(option)}>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 136)                               {option}   
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 137)                           </p>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 138)                       ): <span>...</span>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 139)                   }
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 140)                   {currentIndex < QuizData.length && 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 141)                       currentIndex > 0 &&
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 142)                       <button
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 143)                       onClick={this.prevQuestionHandler}>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 144)                           Previous Question
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 145)                       </button>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 146)                   }
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 147)                   {currentIndex < QuizData.length - 1 &&
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 148)                       <button disabled = {this.state.disabled}
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 149)                       onClick={this.nextQuestionHandler}>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 150)                           Next Question
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 151)                       </button>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 152)                   }
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 153)                   {currentIndex === QuizData.length - 1 &&
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 154)                       <button disabled = {this.state.disabled}
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 155)                       onClick={this.finishHandler}>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 156)                           Finish Quiz
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 157)                       </button>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 158)                   }
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 159) 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 160)               </div>
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 161)           )
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 162)     }
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 163) }
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 164) 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 165) export default QuizComp
dd99aba2 (Ryan Perry 2024-10-16 19:55:34 -0400  1) /* quizdata.js
dd99aba2 (Ryan Perry 2024-10-16 19:55:34 -0400  2)  * Description: Stores quiz questions and their options.
dd99aba2 (Ryan Perry 2024-10-16 19:55:34 -0400  3)  */
dd99aba2 (Ryan Perry 2024-10-16 19:55:34 -0400  4) 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  5) export const QuizData = [
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  6)     {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  7)         id: 0,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  8)         question: 'How would you describe yourself?',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  9)         options: ['Hands-on learner', 'Nerd', 'Adventurous',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 10)                   'Environmentally consious', 'Good at science', 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 11)                   'Driven and passionate']
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 12)     },
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 13)     {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 14)         id: 1,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 15)         question: 'What did you like to play with as a kid?',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 16)         options: ['Model Planes', 'Lego Bricks', 'Home Experiments',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 17)                   'Playdough', 'Explore Outdoors']
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 18)     },
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 19)     {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 20)         id: 2,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 21)         question: 'Which of these topics did you like best at school?',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 22)         options: ['Music', 'Economics', 'Physics', 'Biology', 'Math',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 23)                   'Chemistry']
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 24)     },
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 25)     {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 26)         id: 3,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 27)         question: 'What do you like to do on the weekend?',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 28)         options: ['Build something in the shed', 'Rebuild electronics',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 29)                   'Spend time in the great outdoors', 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 30)                   'Cook a new recipe', 'Read up on crypto', 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 31)                   'Fly a drone']
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 32)     }, 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 33)     {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 34)         id: 4,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 35)         question: 'What kind of impact do you want to have on the world?',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 36)         options: ['Improve technology for industries and everyday life',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 37)                   'Advance energy systems and electrical infrastructure',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 38)                   'Enhance healthcare and save lives with technology', 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 39)                   'Protect the environment and promote sustainability',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 40)                   'Innovate the world of software and data systems' ], 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 41) 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 42)     }
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 43) ]

/alternate-career-planner/src/components/QuizComp/quizdata.js
dd99aba2 (Ryan Perry 2024-10-16 19:55:34 -0400  1) /* quizdata.js
dd99aba2 (Ryan Perry 2024-10-16 19:55:34 -0400  2)  * Description: Stores quiz questions and their options.
dd99aba2 (Ryan Perry 2024-10-16 19:55:34 -0400  3)  */
dd99aba2 (Ryan Perry 2024-10-16 19:55:34 -0400  4) 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  5) export const QuizData = [
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  6)     {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  7)         id: 0,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  8)         question: 'How would you describe yourself?',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400  9)         options: ['Hands-on learner', 'Nerd', 'Adventurous',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 10)                   'Environmentally consious', 'Good at science', 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 11)                   'Driven and passionate']
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 12)     },
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 13)     {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 14)         id: 1,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 15)         question: 'What did you like to play with as a kid?',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 16)         options: ['Model Planes', 'Lego Bricks', 'Home Experiments',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 17)                   'Playdough', 'Explore Outdoors']
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 18)     },
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 19)     {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 20)         id: 2,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 21)         question: 'Which of these topics did you like best at school?',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 22)         options: ['Music', 'Economics', 'Physics', 'Biology', 'Math',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 23)                   'Chemistry']
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 24)     },
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 25)     {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 26)         id: 3,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 27)         question: 'What do you like to do on the weekend?',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 28)         options: ['Build something in the shed', 'Rebuild electronics',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 29)                   'Spend time in the great outdoors', 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 30)                   'Cook a new recipe', 'Read up on crypto', 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 31)                   'Fly a drone']
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 32)     }, 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 33)     {
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 34)         id: 4,
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 35)         question: 'What kind of impact do you want to have on the world?',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 36)         options: ['Improve technology for industries and everyday life',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 37)                   'Advance energy systems and electrical infrastructure',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 38)                   'Enhance healthcare and save lives with technology', 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 39)                   'Protect the environment and promote sustainability',
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 40)                   'Innovate the world of software and data systems' ], 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 41) 
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 42)     }
cbad6db7 (Ryan Perry 2024-10-16 19:48:00 -0400 43) ]

/alternate-career-planner/src/views/Home/Home.css
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400  1) /* Home.css
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400  2)  * Description: CSS styling for Home.js
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400  3)  */
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400  4) 
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400  5) .Home {
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400  6)     text-align: left;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400  7)     padding-top: 30px;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400  8)     padding-left: 5%;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400  9)     padding-right: 5%;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 10)     padding-bottom: 30px;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 11)     width: 90%;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 12) }
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 13) 
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 14) .text-section p {
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 15)     font-size: 28px;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 16)     margin-bottom: 30px;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 17)     line-height: 1.5;
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 18)     
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 19) }
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 20) 
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 21) .buttons {
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 22)     display: flex;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 23)     gap: 15px;
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 24)     margin-bottom: 30px;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 25) }
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 26) 
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 27) .upload-button {
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 28)     background-color: #489FDF;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 29)     color: white;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 30)     padding: 12px 24px;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 31)     font-size: 16px;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 32)     border: none;
9481a210 (Ryan Perry 2024-10-16 19:35:31 -0400 33)     border: 2px solid #489FDF;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 34)     border-radius: 4px;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 35)     cursor: pointer;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 36) }
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 37) .quiz-button {
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 38)     background-color: white;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 39)     color: #489FDF;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 40)     padding: 12px 24px;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 41)     font-size: 16px;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 42)     border: 2px solid #489FDF;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 43)     border-radius: 4px;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 44)     cursor: pointer;
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 45) }
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 46) 
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 47) .tutorial-section p {
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 48)   padding-left: 10px;
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 49)   font-size: 24px;
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 50) }

/alternate-career-planner/src/views/Home/Home.js
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400  1) /* Home.js
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400  2)  * Description: Implements the webpage homescreen. Displays a brief 
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400  3)  * descritpion of webpage, buttons, and tutorial.
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400  4)  */
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400  5) 
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400  6) import React from 'react';
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400  7) import { Link } from 'react-router-dom';
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400  8) import './Home.css';
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400  9) import ImageSlider from "./../../components/ImageSlider/ImageSlider";
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 10) 
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 11) const Home = () => {
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 12)     
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 13)     const slides = [
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 14)         {
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 15)             url: 'http://localhost:3000/image-1.jpg', 
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 16)             title: 'Step 1: In myUTK, click the My Resources Tab, and select '
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 17)                  + 'DARS and uTrack.'
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 18)         },
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 19)         {
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 20)             url: 'http://localhost:3000/image-2.jpg', 
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 21)             title: 'Step 2: Select Run Declared Programs.'
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 22)         },
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 23)         {
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 24)             url: 'http://localhost:3000/image-3.jpg', 
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 25)             title: 'Step 3: Select your audit from the Program Column.'
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 26)         },
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 27)         {
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 28)             url: 'http://localhost:3000/image-4.jpg', 
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 29)             title: 'Step 4: Navigate to the Course History tab.'
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 30)         },
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 31)         {
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 32)             url: 'http://localhost:3000/image-5.jpg', 
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 33)             title: 'Step 5: Right click the Course History table and select Save As.'
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 34)         },
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 35)         {
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 36)             url: 'http://localhost:3000/image-6.jpg', 
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 37)             title: 'Step 6: Save your academic history file as filetype WebPage'
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 38)                  + ', HTML Only.'
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 39)         }
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 40)     ];
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 41) 
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 42)     const containerStyles = {
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 43)         width: '921.6px',
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 44)         height: '518.4px',
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 45)         margin: '0 auto',
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 46)     };
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 47) 
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 48)     return (
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 49)         <div className='Home'>
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 50) 
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 51)             {/* Brief Description */}
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 52)             <div className='text-section'>
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 53)                 <h1>We make switching majors easy.</h1>
9481a210 (Ryan Perry 2024-10-16 19:35:31 -0400 54)                 <p> Welcome to the Alternate Career Planner! Like 
9481a210 (Ryan Perry 2024-10-16 19:35:31 -0400 55)                     engineering but hate your major? Don't worry, you've
9481a210 (Ryan Perry 2024-10-16 19:35:31 -0400 56)                     come to the right place. Upload your academic 
9481a210 (Ryan Perry 2024-10-16 19:35:31 -0400 57)                     history file and find majors that you could easily 
9481a210 (Ryan Perry 2024-10-16 19:35:31 -0400 58)                     switch to, or take a short quiz to find out which 
9481a210 (Ryan Perry 2024-10-16 19:35:31 -0400 59)                     major is right for you. </p>
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 60) 
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 61)                 {/* Buttons */}
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 62)                 <div className='buttons'>
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 63)                     <button className='upload-button'>Upload File</button>
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 64)                     <Link to='/quiz'>
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 65)                         <button className='quiz-button'>Take Quiz</button>
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 66)                     </Link>
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 67)                 </div>
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 68)             </div> 
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 69) 
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 70)             <hr style={{ width: '100%', marginTop: '40px', marginBottom: '40px' }} />
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 71) 
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 72)             {/* Tutorial */}
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 73)             <h2>❓ What's an academic history file?</h2>
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 74)             <div className='tutorial-section'>
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 75)                 <p>Your academic history file contains all the coures
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 76)                    you have taken at UTK. It's generated by UTK's Degree 
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 77)                    Audit Report System (DARS).</p>
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 78)             </div>
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 79) 
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 80)             <hr style={{ width: '100%', marginTop: '40px', marginBottom: '40px' }} />
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 81) 
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 82)             <div style={containerStyles}>
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 83)                 <ImageSlider slides={slides}/>
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 84)             </div>
41631666 (Ryan Perry 2024-10-17 03:37:23 -0400 85) 
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 86)         </div>
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 87)     );
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 88) };
d79d727f (Ryan Perry 2024-10-16 13:45:35 -0400 89) export default Home;

/alternate-career-planner/src/views/Quiz/Quiz.css
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400  1) /* Quiz.css
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400  2)  * Description: CSS Styling for Quiz.
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400  3)  */
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400  4) 
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400  5) .Quiz {
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400  6)     text-align: left;
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400  7)     padding-top: 30px;
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400  8)     padding-left: 5%;
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400  9)     padding-bottom: 30px;
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 10)     width: 90%;
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 11) }
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 12) 
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 13) .text-section p {
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 14)     font-size: 28px;
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 15)     margin-bottom: 30px;
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 16)     line-height: 1.5;
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 17) }
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 18) 
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 19) .selected {
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 20)     background-color: #489FDF !important;
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 21)     color: #FFFFFF !important;
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 22) }
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 23) 
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 24) .options {
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 25)     padding: 8px;
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 26)     border: 3px solid #4B4B4B;
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 27)     cursor: pointer;
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 28)     width: 30%;
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 29)     background-color: white;
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 30)     color: #FF8200;
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 31)     font-weight: bold;
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 32) }
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 33) 
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 34) ul {
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 35)     list-style-type: none;
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 36) }
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 37) 
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 38) ul li {
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 39)     margin: 5px;
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 40) }

/alternate-career-planner/src/views/Quiz/Quiz.js
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400  1) /* Quiz.js
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400  2)  * Description: Diplays the major interest quiz.
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400  3)  */
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400  4) 
bf88acb9 (Ryan Perry 2024-10-16 13:51:02 -0400  5) import React from "react";
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400  6) 
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400  7) import './Quiz.css';
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400  8) import QuizComp from './../../components/QuizComp/QuizComp';
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400  9) 
bf88acb9 (Ryan Perry 2024-10-16 13:51:02 -0400 10) const Quiz = () => {
bf88acb9 (Ryan Perry 2024-10-16 13:51:02 -0400 11)     return (
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 12)         <div className='Quiz'>
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 13)             <div className='text-section'>
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 14)                 <h1>Interest Quiz</h1>
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 15)                 <p> Answer a few questions to find out 
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 16)                     which major is right for you. </p>
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 17)             </div>
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 18)             
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 19)             <QuizComp />
bf88acb9 (Ryan Perry 2024-10-16 13:51:02 -0400 20)         </div>
bf88acb9 (Ryan Perry 2024-10-16 13:51:02 -0400 21)     );
bf88acb9 (Ryan Perry 2024-10-16 13:51:02 -0400 22) };
9e9e32e9 (Ryan Perry 2024-10-16 19:37:04 -0400 23) 
bf88acb9 (Ryan Perry 2024-10-16 13:51:02 -0400 24) export default Quiz;

/java_parsing/course.java
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400  1) /* Course.java
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400  2)  * Description: Implements 'Course' class
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400  3)  */
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400  4) 
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400  5) import java.io.BufferedReader;
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400  6) import java.io.IOException;
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400  7) import java.io.StringReader;
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400  8) 
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400  9) public class course {
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 10)     private String courseCode;
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 11)     private double creditHours;
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 12)     private String grade;
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 13)     private String title;
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400 14) 
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 15)     /*
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 16)      * Default course constructor.
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 17)      */
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 18)     public course() {}
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400 19) 
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 20)     /*
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 21)      * Returns a Course's course code.
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 22)      */
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 23)     public String 
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 24)     getCourseCode() 
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 25)     {
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 26)         return courseCode;
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 27)     }
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400 28) 
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 29)     /*
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 30)      * Returns a Course's credit hours.
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 31)      */
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 32)     public double
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 33)     getCreditHours()
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 34)     {
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 35)         return creditHours;
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 36)     }
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400 37) 
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 38)     /*
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 39)      * Returns a Course's grade.
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 40)      */
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 41)     public String
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 42)     getGrade()
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 43)     {
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 44)         return grade;
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 45)     }
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400 46) 
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 47)     /*
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 48)      * Returns a Course's title.
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 49)      */
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 50)     public String
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 51)     getTitle()
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 52)     {
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 53)         return title;
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 54)     }
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400 55) 
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 56)     /*
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 57)      * Sets a Course's member variables given 
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 58)      * an unformatted course block.
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 59)      */
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 60)     public void 
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 61)     setCourseInfo(String block)
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 62)     {
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 63)         BufferedReader read = new BufferedReader(new StringReader(block)) ;
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 64)         String line;
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400 65) 
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 66)         try {
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 67)             for (int i = 1; i < 30; i++) {
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 68)                 line = read.readLine();
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400 69) 
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 70)                 if (i == 14) {
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 71)                     /* Course codes are stored on line 14 of every course block.
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 72)                      * We must add a space between the letters and numbers of 
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 73)                      * course codes to align with the naming conventions in 
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 74)                      * our database.
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 75)                      */
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 76)                     courseCode = line.trim().replaceAll("\\s+", "")
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 77)                                              .replaceAll("([A-Z]+)([0-9]+)", "$1 $2");
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 78)                     this.courseCode = courseCode;
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 79)                 } else if (i == 19) {
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 80)                     // Course credit hours are stored on line 19 of every course block.
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 81)                     String creditHoursStr = line.trim();
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 82)                     creditHours = Double.parseDouble(creditHoursStr);
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 83)                     this.creditHours = creditHours;
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 84)                 } else if (i == 24) {
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 85)                     // Course grades are stored on line 24 of every course block.
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 86)                     grade = line.trim();
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 87)                     this.grade = grade;
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 88)                 } else if (i == 29) {
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 89)                     // Course titles are stored on line 29 of every course block. 
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 90)                     title = line.trim();
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 91)                     this.title = title;
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 92)                 }
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 93)             }
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 94)         } catch (IOException e) {
51af9d8f (Ryan Perry 2024-10-11 11:36:37 -0400 95)                 e.printStackTrace();
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400 96)         }
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400 97)     }
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400 98) }

/java_parsing/main.java
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400  1) /* Main.java
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400  2)  * Description: Parses information from the user's academic history
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400  3)  * HTML webpage and stores taken courses in a vector of course objects
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400  4)  */
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400  5) 
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400  6) import java.io.BufferedReader;
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400  7) import java.io.FileReader;
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400  8) import java.io.IOException;
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400  9) import java.util.ArrayList;
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400 10) import java.util.List;
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400 11) 
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400 12) public class main {
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 13)     public static void 
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 14)     main(String[] args)
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 15)     {
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 16)         if (args.length != 1) {
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 17)             System.err.println("Academic history HTML not specified");
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 18)             System.exit(-1);
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 19)         }
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400 20) 
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 21)         List<course> coursesTaken = readCourseInfo(args[0]);
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 22)         
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 23)         for (int i = 0; i < coursesTaken.size(); i++) {
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 24)             course current = coursesTaken.get(i);
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 25)             System.out.println("Title: " + current.getTitle() +
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 26)                                                  "\nCourse Code: " + current.getCourseCode() +
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 27)                                                  "\nCredit Hours: " + current.getCreditHours() +
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 28)                                                  "\nGrade: " + current.getGrade() + "\n");
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 29)         }
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400 30)     }
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400 31) 
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 32)     /*
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 33)      * This function reads the academic history HTML and stores all
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 34)      * the courses the student has completed or is taking.
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 35)      */
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 36)     public static List<course> 
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 37)     readCourseInfo(String html)
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 38)     {
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 39)         List<course> coursesTaken = new ArrayList<>();
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 40)         StringBuilder courseBlock = new StringBuilder();
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400 41) 
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 42)         String even = "class=\"even\">";
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 43)         String odd = "class=\"odd\">";
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 44)     
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 45)         try (BufferedReader history = new BufferedReader(new FileReader(html))) {
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 46)             String line;
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 47)             while ((line = history.readLine()) != null) {
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 48)                 // Check if line contains a start delimeter
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 49)                 if (line.contains(even) || line.contains(odd)) {
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 50)                     // Store the next 30 lines in courseBlock
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 51)                     courseBlock.append(line).append("\n");
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 52)                     for (int i = 0; i < 30; i++) {
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 53)                         if ((line = history.readLine()) != null) {
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 54)                             courseBlock.append(line).append("\n");
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 55)                         } else {
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 56)                             break; // break at end of file
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 57)                         }
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 58)                     }
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 59)                     course newCourse = new course();
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 60)                     newCourse.setCourseInfo(courseBlock.toString());
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 61)                     coursesTaken.add(newCourse);
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 62)                     courseBlock.setLength(0); // clear the StringBuilder
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 63)                 }
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400 64)             }
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 65)         } catch (IOException e) {
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 66)                 e.printStackTrace();
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 67)                 System.exit(1);
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400 68)         }
7f64464e (Ryan Perry 2024-10-11 11:36:43 -0400 69)         return coursesTaken;
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400 70)     }
4106aabc (Ryan Perry 2024-10-09 16:31:40 -0400 71) }

/java_parsing/README.md
29726258 (Ryan Perry 2024-10-09 16:37:09 -0400 1) # Academic History Parsing
29726258 (Ryan Perry 2024-10-09 16:37:09 -0400 2) ## Overview
29726258 (Ryan Perry 2024-10-09 16:37:09 -0400 3) * This program parses a student's academic history HTML file in Java and extracts the course code, credit hours, grade, course title, and status for each class the student has taken or is taking. 
29726258 (Ryan Perry 2024-10-09 16:37:09 -0400 4) ## Usage
29726258 (Ryan Perry 2024-10-09 16:37:09 -0400 5) * This program can be compiled using javac. The user must provide an academic history HTML file on the command line. To obtain this file, run a DARS report online via MyUTK. Select the Course History tab. Right click the Course History Table and select Save As. Be sure to save as type Webpage, HTML Only.
/alternate-career-planner/src/App.js
59ddf6de (Ryan Perry 2024-10-30 20:03:05 -0400  1) import React, { useState } from 'react';
4f554bd4 (Ryan Perry 2024-10-24 16:53:10 -0400  2) import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
59ddf6de (Ryan Perry 2024-10-30 20:03:05 -0400  9) import CourseHistoryView from './views/CourseHistoryView/CourseHistory';
59ddf6de (Ryan Perry 2024-10-30 20:03:05 -0400 12)   const [courses, setCourses] = useState([]);
59ddf6de (Ryan Perry 2024-10-30 20:03:05 -0400 13) 
59ddf6de (Ryan Perry 2024-10-30 20:03:05 -0400 14)   const handleFileParse = (parsedCourses) => {
59ddf6de (Ryan Perry 2024-10-30 20:03:05 -0400 15)       setCourses(parsedCourses);
59ddf6de (Ryan Perry 2024-10-30 20:03:05 -0400 16)   }
59ddf6de (Ryan Perry 2024-10-30 20:03:05 -0400 17) 
1787fc1a (Ryan Perry 2024-10-24 18:36:58 -0400 18)   // Clear local storage when user opens website
1787fc1a (Ryan Perry 2024-10-24 18:36:58 -0400 19)   window.onunload = function () {
1787fc1a (Ryan Perry 2024-10-24 18:36:58 -0400 20)       localStorage.clear();
1787fc1a (Ryan Perry 2024-10-24 18:36:58 -0400 21)   }
59ddf6de (Ryan Perry 2024-10-30 20:03:05 -0400 28)               <Route path="/" element={<Home onFileParse={handleFileParse} />} />
59ddf6de (Ryan Perry 2024-10-30 20:03:05 -0400 31)               <Route path="/course_history" element={<CourseHistoryView courses={courses} />} />

/alternate-career-planner/src/components/CourseHistory/CourseHistory.js
b01fdb44 (Ryan Perry 2024-10-30 20:05:41 -0400  8)                 {courses.map((course, index) =>(
b01fdb44 (Ryan Perry 2024-10-30 20:05:41 -0400  9)                     <><tr key={index} className="CompletedCoursesList">
b01fdb44 (Ryan Perry 2024-10-30 20:05:41 -0400 10)                             <th className="CourseName">{course.title}</th>
b01fdb44 (Ryan Perry 2024-10-30 20:05:41 -0400 20) export default CourseHistory;

/alternate-career-planner/src/components/FileUploader/Course.js
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400  1) /* Course.js
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400  2)  * Description: Implements the Course class.
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400  3)  */
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400  4) 
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400  5) class Course {
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400  6)     constructor() {
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400  7)         this.courseCode = '';
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400  8)         this.creditHours = 0;
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400  9)         this.grade = '';
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 10)         this.title = '';
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 11)     }
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 12) 
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 13)     /*
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 14)      * Returns a Course's course code.
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 15)      */
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 16)     getCourseCode() {
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 17)         return this.courseCode;
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 18)     }
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 19) 
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 20)     /*
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 21)      * Returns a Course's credit hours.
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 22)      */
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 23)     getCreditHours() {
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 24)         return this.creditHours;
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 25)     }
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 26) 
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 27)     /*
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 28)      * Returns a Course's grade.
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 29)      */
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 30)     getGrade() {
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 31)         return this.grade;
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 32)     }
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 33) 
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 34)     /*
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 35)      * Returns a Course's title.
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 36)      */
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 37)     getTitle() {
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 38)         return this.title;
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 39)     }
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 40) 
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 41)     /*
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 42)      * Sets a Course's member variables given
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 43)      * an unformatted course block.
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 44)      */
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 45)     setCourseInfo(block) {
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 46)         const lines = block.split('\n');
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 47) 
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 48)         for (let i = 0; i < lines.length; i++) {
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 49)             const line = lines[i].trim();
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 50) 
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 51)             if (i === 13) { // Course code line
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 52)                 this.courseCode = line.replace(/\s+/g, '')
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 53)                     .replace(/([A-Z]+)([0-9]+)/, '$1 $2');
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 54) 
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 55)                 const codeRegex = /^[A-Z]+\s[0-9]{3,4}$/;
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 56)                 if (!codeRegex.test(this.courseCode)) {
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 57)                     return false;
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 58)                 }
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 59)             } else if (i === 18) { // Credit hours line
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 60)                 this.creditHours = parseFloat(line);
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 61) 
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 62)                 if (this.creditHours < 1 || this.creditHours > 4) {
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 63)                     return false;
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 64)                 }
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 65)             } else if (i === 23) { // Grade line
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 66)                 this.grade = line;
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 67) 
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 68)                  /*
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 69)                  * Transfer credits are preceded by a 'T'.
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 70)                  * S means the credit has been fulfilled.
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 71)                  */
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 72)                 const gradeRegex = /^IP|^S|^T?(A|B|C|D|F)(\+|-)?$/
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 73)                 if (!gradeRegex.test(this.grade)) {
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 74)                     return false;
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 75)                 }
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 76)             } else if (i === 28) { // Title line
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 77)                 this.title = line;
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 78)             }
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 79)         }
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 80)         return true;
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 81)     }
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 82) }
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 83) 
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 84) export default Course;
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 85) 

/alternate-career-planner/src/components/FileUploader/FileHandler.js
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400  1) /* FileHandler.js
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400  2)  * Description: Parses the academic history file and 
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400  3)  * stores each course in the coursesTaken array.
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400  4)  */
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400  5) 
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400  6) import Course from './Course';
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400  7) 
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400  8) export let coursesTaken = [];
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400  9) 
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 10) export const parseCourseContent = (content) => {
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 11)     const even = 'class="even">';
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 12)     const odd = 'class="odd">';
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 13)     let courseBlock = '';
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 14)     coursesTaken = [];
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 15) 
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 16)     const lines = content.split('\n');
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 17) 
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 18)     for (let i = 0; i < lines.length; i++) {
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 19)         const line = lines[i];
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 20)         if (line.includes(even) || line.includes(odd)) {
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 21)             courseBlock += line + '\n';
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 22)             for (let j = 0; j < 30; j++) {
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 23)                 if (i + 1 < lines.length) {
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 24)                     courseBlock += lines[++i] + '\n';
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 25)                 } else {
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 26)                     break;
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 27)                 }
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 28)             }
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 29)             const newCourse = new Course();
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 30)             if (!newCourse.setCourseInfo(courseBlock)) {
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 31)                 return false;
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 32)             }
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 33)             coursesTaken.push(newCourse);
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 34)             // Reset the course block for the next coures
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 35)             courseBlock = '';
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 36)         }
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 37)     }
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 38)     localStorage.setItem('coursesTaken', JSON.stringify(coursesTaken));
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 39)     return true;
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 40) };

/alternate-career-planner/src/components/FileUploader/FileUploader.js
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400  1) /* FileUploader.js
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400  2)  * Description: Users can upload their academic history file.
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400  3)  */
6b90dab7 (Ryan Perry 2024-10-25 11:05:20 -0400  4) 
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400  5) import { useRef, useState } from 'react';
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400  6) import { useNavigate } from 'react-router-dom';
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400  7) import { parseCourseContent, coursesTaken } from './FileHandler';
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400  8) 
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400  9) const FileUploader = ({ onFileParse }) => {
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 10)     const [fileUploaded, setFileUploaded] = useState(false);
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 11)     const [error, setError] = useState('');
6b90dab7 (Ryan Perry 2024-10-25 11:05:20 -0400 12)     const hiddenFileInput = useRef(null);
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 13)     const navigate = useNavigate();
6b90dab7 (Ryan Perry 2024-10-25 11:05:20 -0400 14) 
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 15)     const handleClick = () => {
6b90dab7 (Ryan Perry 2024-10-25 11:05:20 -0400 16)         hiddenFileInput.current.click();
6b90dab7 (Ryan Perry 2024-10-25 11:05:20 -0400 17)     };
6b90dab7 (Ryan Perry 2024-10-25 11:05:20 -0400 18) 
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 19)     const handleChange = (event) => {
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 20)         const file = event.target.files[0];
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 21) 
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 22)         if (file && file.type !== 'text/html') {
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 23)             setError('Invalid file type. Please upload an HTML file.');
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 24)             return;
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 25)         }
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 26) 
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 27)         const reader = new FileReader();
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 28) 
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 29)         reader.onload = (e) => {
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 30)             const content = e.target.result;
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 31)             if(!parseCourseContent(content)) {
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 32)                 setError('Invalid course data. Please upload another file.');
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 33)                 return;
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 34)             }
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 35)             
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 36)             setFileUploaded(true);
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 37)             onFileParse([...coursesTaken]);
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 38)             navigate('/course_history');
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 39)         };
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 40) 
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 41)         reader.onerror = (err) => {
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 42)             console.error("Error reading file:", err);
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 43)         };
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 44) 
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 45)         reader.readAsText(file);
6b90dab7 (Ryan Perry 2024-10-25 11:05:20 -0400 46)     };
6b90dab7 (Ryan Perry 2024-10-25 11:05:20 -0400 47) 
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 48)     const handleViewCourseHistory = () => {
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 49)         navigate('/course_history');
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 50)     }
6bb50048 (Ryan Perry 2024-10-30 20:07:32 -0400 51) 
6b90dab7 (Ryan Perry 2024-10-25 11:05:20 -0400 52)     return (
6b90dab7 (Ryan Perry 2024-10-25 11:05:20 -0400 53)         <>
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 54)             <div className="buttons">
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 55)                 {error && <p>{error}</p>}
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 56)                 {fileUploaded ? (
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 57)                     <button
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 58)                         className="upload-button"
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 59)                         onClick={handleViewCourseHistory}
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 60)                     >
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 61)                         View Course History
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 62)                     </button>
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 63)                 ) : (
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 64)                     <button
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 65)                         className="upload-button"
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 66)                         onClick={handleClick}
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 67)                     >
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 68)                         Upload File
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 69)                     </button>
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 70)                 )}
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 71)                 <input
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 72)                     type='file'
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 73)                     onChange={handleChange}
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 74)                     ref={hiddenFileInput}
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 75)                     style={{ display: 'none' }}
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 76)                 />
4c776ee1 (Ryan Perry 2024-10-30 22:41:06 -0400 77)             </div>
6b90dab7 (Ryan Perry 2024-10-25 11:05:20 -0400 78)         </>
6b90dab7 (Ryan Perry 2024-10-25 11:05:20 -0400 79)     );
6b90dab7 (Ryan Perry 2024-10-25 11:05:20 -0400 80) };
6b90dab7 (Ryan Perry 2024-10-25 11:05:20 -0400 81) 
6b90dab7 (Ryan Perry 2024-10-25 11:05:20 -0400 82) export default FileUploader;

/alternate-career-planner/src/components/Header/Header.js
0a7b6710 (Ryan Perry 2024-10-24 18:05:54 -0400 15)                     <Link to='/'>

/alternate-career-planner/src/components/QuizComp/QuizComp.js
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400   3)  * Users answer questions from quizdata.js. Redirects to results
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400   4)  * screen on completion.
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400   8) import { QuizData } from './quizdata2.js'
68b09694 (Ryan Perry 2024-10-24 16:49:23 -0400   9) import { Navigate } from 'react-router-dom'
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  11) const majorMapping = {
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  12)     I: "Computer Science",
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  13)     M: "Computer Engineering",
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  14)     N: "Electrical Engineering",
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  15)     Q: "Aerospace Engineering",
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  16)     J: "Biomedical Engineering",
a6773c7a (Ryan Perry 2024-10-24 18:18:23 -0400  17)     K: "Environmental Engineering",
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  18)     S: "Chemical Engineering",
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  19)     O: "Industrial Engineering",
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  20)     R: "Mechanical Engineering",
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  21)     L: "Nuclear Engineering",
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  22)     P: "Civil Engineering",
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  23)     T: "Materials Science and Engineering"
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  24) }
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  25) 
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  30)         currentPath: '*',
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  32)         userAnswer: null,
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  35)         finalMajor: null
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  36)     };
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  38)     /*
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  39)      *  Loads the current question and its options 
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  40)      *  into the state based on the current path.
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  41)      */
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  43)         const { currentPath } = this.state;
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  44)         const currentQuestion = QuizData.find(q => q.path === currentPath);
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  45) 
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  46)         if (currentQuestion) {
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  47)             this.setState({
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  48)                 question: currentQuestion.question,
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  49)                 options: currentQuestion.options,
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  50)                 currentIndex: currentQuestion.id,
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  51)                 disabled: true,
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  52)                 userAnswer: null
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  53)             });
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  54)         }
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  55)     };
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  57)     /*
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  58)      * Handles the user selecting an answer.
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  59)      * Updates the userAnswer in state and enables the "Next" button.
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  60)      */
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  62)         const { currentPath } = this.state;
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  63)         const currentQuestion = QuizData.find(q => q.path === currentPath);
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  65)         const selectedAnswerIndex =
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  66)             currentQuestion.options.indexOf(selectedAnswer);
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  68)         const newPath = currentQuestion.newPath[selectedAnswerIndex];
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  71)             userAnswer: selectedAnswer,
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  72)             disabled: false,
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  73)             nextPath: newPath
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  74)         });
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  75)     };
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  76) 
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  77)     /*
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  78)      * Moves to the next question.
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  79)      * Ends the quiz if the next path is a major.
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  80)      */
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  81)     nextQuestionHandler = () => {
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  82)         const { nextPath } = this.state;
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  83) 
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  84)         if (majorMapping[nextPath]) {
cb1b9c2c (Ryan Perry 2024-10-24 17:17:12 -0400  85)             const finalMajor = majorMapping[nextPath];
cb1b9c2c (Ryan Perry 2024-10-24 17:17:12 -0400  86) 
cb1b9c2c (Ryan Perry 2024-10-24 17:17:12 -0400  87)             localStorage.setItem('finalMajor', finalMajor);
cb1b9c2c (Ryan Perry 2024-10-24 17:17:12 -0400  88) 
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  89)             this.setState({
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  90)                 quizEnd: true,
cb1b9c2c (Ryan Perry 2024-10-24 17:17:12 -0400  91)                 finalMajor: finalMajor
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  92)             });
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  93)         } else {
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  94)             // Otherwise, update the path and load the next question
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  95)             this.setState({ currentPath: nextPath }, this.loadQuiz);
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  96)         }
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  97)     };
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400  99)     /*
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 100)      * Loads the first quiz question.
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 101)      * Runs after the component mounts.
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 102)      */
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 105)     };
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 106) 
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 107)     /*
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 108)      * Renders the quiz intereface.
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 109)      * Displays the final major if the quiz ends.
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 110)      */
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 111)     render() {
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 112)         const { question, options, quizEnd, 
574defb2 (Ryan Perry 2024-10-30 20:03:55 -0400 113)                 userAnswer, disabled } = this.state;
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 115)         if (quizEnd) {
8cd85371 (Ryan Perry 2024-10-25 10:27:47 -0400 116)             return <Navigate to="/results"/>;
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 119)         return (
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 120)             <div>
56a423ac (Ryan Perry 2024-10-24 18:29:21 -0400 121)                 <h2>{`Question ${this.state.currentIndex + 1}`}</h2>
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 122)                 <h2>{question}</h2>
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 123) 
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 124)                 {options.map((option, index) => (
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 125)                     <p
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 126)                         key={index}
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 127)                         className={`options ${userAnswer === option 
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 128)                                                 ? 'selected' : null}`}
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 129)                         onClick={() => this.checkAnswer(option)}
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 130)                     >
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 131)                         {option}
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 132)                     </p>
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 133)                 ))}
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 134) 
8cd85371 (Ryan Perry 2024-10-25 10:27:47 -0400 135)                 <button className='next-button' 
8cd85371 (Ryan Perry 2024-10-25 10:27:47 -0400 136)                     disabled={disabled} onClick={this.nextQuestionHandler}>
8cd85371 (Ryan Perry 2024-10-25 10:27:47 -0400 137)                     Next
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 138)                 </button>
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 139)             </div>
fae16a39 (Ryan Perry 2024-10-24 15:49:26 -0400 140)         );

/alternate-career-planner/src/components/QuizComp/quizdata2.js
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400   1) /* quizdata2.js
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400   2)  * Description: Stores quiz questions and their options.
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400   3)  */
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400   4) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400   5) export const QuizData = [
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400   6)     {
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400   7)         path:     '*',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400   8)         id:        0,
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400   9) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  10)         question: 'Which of the following topics are you '
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  11)                 + 'most interested in studying?',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  12) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  13)         options:  ['Hardware and software aspects of computer systems',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  14)                    'Challenges in biology and medicine',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  15)                    'Designing and building systems and machines',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  16)                    'Properties of materials at the atomic level'],
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  17) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  18)         newPath:  ['A', 'B', 'C', 'D']
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  19)     },
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  20)     {
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  21)         path:     'A',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  22)         id:        1,
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  23) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  24)         question: 'How do you like to pass your time?',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  25) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  26)         options: ['Building computers',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  27)                   'Playing video games',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  28)                   'Playing with electronics',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  29)                   'Solving puzzles'],
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  30) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  31)         newPath: ['E', 'I', 'E', 'I']
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  32)     },
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  33)     {
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  34)         path:     'B',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  35)         id:        1,
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  36) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  37)         question: 'How do you like to pass your time?',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  38) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  39)         options: ['Trying new recipes',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  40)                   'Reviewing academic journals',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  41)                   'Lifting weights',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  42)                   'Working in the garden'],
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  43) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  44)         newPath: ['K', 'J', 'J', 'K']
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  45)     },
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  46)     {
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  47)         path:     'C',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  48)         id:        1,
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  49) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  50)         question: 'How do you like to pass your time?',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  51) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  52)         options: ['Playing sports',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  53)                   'Volunteering',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  54)                   'Building something in the shed',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  55)                   'Working on a project car'],
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  56) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  57)         newPath: ['F', 'F', 'G', 'G']
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  58)     },
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  59)     {
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  60)         path:     'D',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  61)         id:        1,
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  62) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  63)         question: 'How do you like to pass your time?',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  64) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  65)         options: ['Working outdoors',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  66)                   'Trying new recipes',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  67)                   'Watching documentaries',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  68)                   'Sewing'],
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  69) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  70)         newPath: ['L', 'H', 'L', 'H']
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  71)     },
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  72)     {
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  73)         path:     'E',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  74)         id:        2,
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  75) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  76)         question: 'Would you rather ...',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  77) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  78)         options: ['Design computer systems',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  79)                   'Develop new radar and communication systems',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  80)                   'Work on machines that control power plants',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  81)                   'Create new software'],
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  82) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  83)         newPath: ['M', 'N', 'N', 'M']
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  84)     },
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  85)     {
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  86)         path:     'F',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  87)         id:        2,
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  88) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  89)         question: 'Would you rather ...',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  90) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  91)         options: ['Improve the productivity of systems and processes',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  92)                   'Collaborate with many different people',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  93)                   'Build a bridge',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  94)                   'Work on a construction site'],
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  95) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  96)         newPath: ['O', 'O', 'P', 'P']
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  97)     },
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  98)     {
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400  99)         path:     'G',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 100)         id:        2,
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 101) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 102)         question: 'Would you rather ...',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 103) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 104)         options: ['Travel to space',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 105)                   'Work on air-conditioning systems',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 106)                   'Build a robot',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 107)                   'Design a jet engine'],
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 108) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 109)         newPath: ['Q', 'R', 'R', 'Q']
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 110)     },
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 111)     {
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 112)         path:     'H',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 113)         id:        2,
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 114) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 115)         question: 'Would you rather ...',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 116) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 117)         options: ['Manufacture gasoline',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 118)                   'Develop new materials for computer chips',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 119)                   'Improve waste water systems',
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 120)                   'Test the durability of golf clubs'],
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 121) 
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 122)         newPath: ['S', 'T', 'S', 'T']
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 123)     }
e8a2a183 (Ryan Perry 2024-10-24 15:49:58 -0400 124) ]

/alternate-career-planner/src/views/CompletedCoursesView/CompletedCoursesView.js 
9910c8b1 (Ryan Perry 2024-10-30 20:05:13 -0400  6) import React, { useState } from 'react';
9910c8b1 (Ryan Perry 2024-10-30 20:05:13 -0400  6) import React, { useState } from 'react';

/alternate-career-planner/src/views/CourseHistoryView/CourseHistory.js
9910c8b1 (Ryan Perry 2024-10-30 20:05:13 -0400  1) import React, {useEffect, useState } from "react";
9910c8b1 (Ryan Perry 2024-10-30 20:05:13 -0400  5) const CourseHistoryView = () => {
9910c8b1 (Ryan Perry 2024-10-30 20:05:13 -0400  6)     const [courses, setCourses] = useState([]);
9910c8b1 (Ryan Perry 2024-10-30 20:05:13 -0400  7) 
9910c8b1 (Ryan Perry 2024-10-30 20:05:13 -0400  8)     useEffect(() => {
9910c8b1 (Ryan Perry 2024-10-30 20:05:13 -0400  9)         const storedCourses = localStorage.getItem('coursesTaken');
9910c8b1 (Ryan Perry 2024-10-30 20:05:13 -0400 10)         if (storedCourses) {
9910c8b1 (Ryan Perry 2024-10-30 20:05:13 -0400 11)           setCourses(JSON.parse(storedCourses));
9910c8b1 (Ryan Perry 2024-10-30 20:05:13 -0400 12)         }
9910c8b1 (Ryan Perry 2024-10-30 20:05:13 -0400 13)     }, []);
9910c8b1 (Ryan Perry 2024-10-30 20:05:13 -0400 31) export default CourseHistoryView;

/alternate-career-planner/src/views/Home/Home.css
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 18) }
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 19) 
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 20) .button-section {
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 21)   display: flex;
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 22)   flex-direction: row;
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 23)   gap: 15px;
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 29)     align-items: center;
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 35)     width: 175px;
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 36)     height: 60px;
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 46)     width: 175px;
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 47)     height: 60px;
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 48)     font-size: 16px;
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 49)     border: 2px solid #489FDF;
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 50)     border-radius: 4px;
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 51)     cursor: pointer;
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 52) }
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 53) 
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 54) .next-button {
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 55)     background-color: white;
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 56)     color: #489FDF;
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 57)     width: 100px;
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 58)     height: 40px;
4a60f509 (Ryan Perry 2024-10-25 10:28:15 -0400 60)     border: none;

/alternate-career-planner/src/views/Home/Home.js
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400   6) import React, {useEffect, useState } from 'react';
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400   7) import { Link, useNavigate } from 'react-router-dom';
8aaba2f6 (Ryan Perry 2024-10-25 11:06:02 -0400  10) import FileUploader from "./../../components/FileUploader/FileUploader";
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  12) const Home = ({ onFileParse }) => {
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400  13)     const [finalMajor, setFinalMajor] = useState(null);
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  14)     const [coursesTaken, setCoursesTaken] = useState(null);
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  15)     const navigate = useNavigate();
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400  16) 
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400  17)     useEffect (() => {
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400  18)         const storedMajor = localStorage.getItem('finalMajor');
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400  19)         if (storedMajor) {
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400  20)           setFinalMajor(storedMajor);
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400  21)         }
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  22) 
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  23)         const storedCourses = localStorage.getItem('coursesTaken');
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  24)         if (storedCourses) {
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  25)             setCoursesTaken(JSON.parse(storedCourses));
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  26)         }
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400  27)     }, []);
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  28) 
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  29)     const handleViewCourseHistory = () => {
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  30)         navigate('/course_history');
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  31)     }
8aaba2f6 (Ryan Perry 2024-10-25 11:06:02 -0400  62)     // Slide size
4d8f77f1 (Ryan Perry 2024-10-30 20:30:00 -0400  76)                     engineering, but not sure about your major? Don't worry, you've
8aaba2f6 (Ryan Perry 2024-10-25 11:06:02 -0400  81)             </div> 
8aaba2f6 (Ryan Perry 2024-10-25 11:06:02 -0400  82) 
8aaba2f6 (Ryan Perry 2024-10-25 11:06:02 -0400  83) 
8aaba2f6 (Ryan Perry 2024-10-25 11:06:02 -0400  84)             <div className='button-section'>
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  85)                 {/*File Upload or Course History Button*/}
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  86)                 {coursesTaken ? (
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  87)                     <div className='buttons'>
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  88)                         <FileUploader onFileParse={onFileParse} />
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  89)                         <button 
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  90)                             onClick={handleViewCourseHistory} 
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  91)                             className='upload-button'
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  92)                         >
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  93)                             View History
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  94)                         </button>
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  95)                     </div>
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  96)                 ) : (
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  97)                     <FileUploader onFileParse={onFileParse} />
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400  98)                 )}
8aaba2f6 (Ryan Perry 2024-10-25 11:06:02 -0400 100)                 {/* Quiz Buttons */}
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400 101)                 {finalMajor !== null ? (
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400 102)                     // Quiz has been completed
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400 103)                     <div className='buttons'>
8aaba2f6 (Ryan Perry 2024-10-25 11:06:02 -0400 104)                         <Link to='/quiz'>
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400 105)                             <button className='quiz-button'>
8aaba2f6 (Ryan Perry 2024-10-25 11:06:02 -0400 106)                                 Retake Quiz
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400 107)                             </button>
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400 108)                         </Link>
8aaba2f6 (Ryan Perry 2024-10-25 11:06:02 -0400 109)                         <Link to='/results'>
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400 110)                             <button className='quiz-button'>
8aaba2f6 (Ryan Perry 2024-10-25 11:06:02 -0400 111)                                 View Quiz Results
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400 112)                             </button>
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400 113)                         </Link>
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400 114)                     </div>
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400 115)                 ) : (
8aaba2f6 (Ryan Perry 2024-10-25 11:06:02 -0400 116)                     // Quiz has not been completed
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400 117)                     <div className='buttons'>
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400 118)                         <Link to='/quiz'>
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400 119)                             <button className='quiz-button'>
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400 120)                                 Take Quiz
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400 121)                             </button>
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400 122)                         </Link>
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400 123)                     </div>
3b25e624 (Ryan Perry 2024-10-24 18:03:49 -0400 124)                 )} 
6965bf7f (Ryan Perry 2024-10-30 20:06:23 -0400 146) 

/alternate-career-planner/src/views/MajorsListView/MajorsListView.js
ad6590d1 (Ryan Perry 2024-10-24 17:18:00 -0400  6) import React, {useEffect, useState } from 'react';
ad6590d1 (Ryan Perry 2024-10-24 17:18:00 -0400  9) import { Link } from 'react-router-dom'
ad6590d1 (Ryan Perry 2024-10-24 17:18:00 -0400 13)     const [finalMajor, setFinalMajor] = useState(null);
ad6590d1 (Ryan Perry 2024-10-24 17:18:00 -0400 14) 
ad6590d1 (Ryan Perry 2024-10-24 17:18:00 -0400 15)     useEffect (() => {
ad6590d1 (Ryan Perry 2024-10-24 17:18:00 -0400 16)         const storedMajor = localStorage.getItem('finalMajor');
ad6590d1 (Ryan Perry 2024-10-24 17:18:00 -0400 17)         if (storedMajor) {
ad6590d1 (Ryan Perry 2024-10-24 17:18:00 -0400 18)           setFinalMajor(storedMajor);
ad6590d1 (Ryan Perry 2024-10-24 17:18:00 -0400 19)         }
ad6590d1 (Ryan Perry 2024-10-24 17:18:00 -0400 20)     }, []);
21aaaff2 (Ryan Perry 2024-10-24 16:30:33 -0400 21) 
21aaaff2 (Ryan Perry 2024-10-24 16:30:33 -0400 25)             <p> Thanks for taking the quiz! Based on your provided answers, we think you'll enjoy: </p>
499c12e2 (Ryan Perry 2024-10-24 16:51:22 -0400 26)             <p className="majorlist-item">
499c12e2 (Ryan Perry 2024-10-24 16:51:22 -0400 27)                 <Link to={`/results/majors/${encodeURIComponent(finalMajor)}`}>
499c12e2 (Ryan Perry 2024-10-24 16:51:22 -0400 28)                     <h3 className="majorlist-title">{finalMajor}</h3>
499c12e2 (Ryan Perry 2024-10-24 16:51:22 -0400 29)                 </Link>
499c12e2 (Ryan Perry 2024-10-24 16:51:22 -0400 30)             </p>
21aaaff2 (Ryan Perry 2024-10-24 16:30:33 -0400 31)             <p>Alternatively, explore all majors below. </p>
21aaaff2 (Ryan Perry 2024-10-24 16:30:33 -0400 37) export default MajorsListView;
/alternate-career-planner/src/components/CourseHistory/CourseHistory.css
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  1) table {
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  2)     width: 100%;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  3)     border-collapse: separate;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  4)     border-spacing: 0 10px;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  5) }
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  6) 
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  7) .CourseDetails {
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  8)     display: flex;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  9)     justify-content: space-between;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 10)     background-color: #fefeff;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 11)     border-radius: 10px;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 12)     box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1);
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 13) }
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 14) 
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 15) .CourseName {
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 18)     background-color: #FEFEFF;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 19)     border-radius: 10px 0 0 10px;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 20)     text-align: left;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 21)     font-size: 18px;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 24) .CourseGrade {
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 26)     color: white;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 27)     background-color: #489FDF;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 28)     width: 20px;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 29)     border-radius: 0 10px 10px 0;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 30)     font-size: 19px;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 31) }

/alternate-career-planner/src/components/CourseHistory/CourseHistory.js 
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  6)     <div>
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  7)         <table>
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  8)             <tbody>
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 10)                     <tr key={index}>
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 11)                         <td className="CourseDetails">
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 12)                             <span className="CourseName">
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 13)                                 {course.title}
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 14)                             </span>
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 15)                             <span className="CourseGrade">
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 16)                                 {course.grade}
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 17)                             </span>
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 18)                         </td>
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 19)                     </tr>
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 21)             </tbody>
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 22)         </table>
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 23)     </div>

/alternate-career-planner/src/components/ProgressBar/ProgressBar.css
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 24)     width: 830px;
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 25)     height: 20px;
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 26)     border-radius: 30px;
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 33)     border-radius: 30px;

/alternate-career-planner/src/components/ProgressBar/ProgressBar.js
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500  6) import React from "react";
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500  7) import './ProgressBar.css'
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500  9) export const ProgressBar = ({ progress }) => {
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 11)         return "#489FDF";
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 12)     };
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 14)     return (
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 15)         <div className="container">
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 16)             <div className="progress-bar">
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 17)                 <div
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 18)                     className="progress-bar-fill"
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 19)                     style={{
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 20)                         width: `${progress}%`,
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 21)                         backgroundColor: getColor(),
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 22)                     }}
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 23)                 >
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 24)                     {" "}
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 25)                 </div>
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 28)     );
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 30) 

/alternate-career-planner/src/components/TopMajors/TopMajors.js
cc40b82b (Ryan Perry 2024-11-13 18:09:44 -0500  1) import React from 'react';
cc40b82b (Ryan Perry 2024-11-13 18:09:44 -0500  2) import '../../views/MajorDetailView/MajorDetailView.css';
cc40b82b (Ryan Perry 2024-11-13 18:09:44 -0500  3) import MajorHeaderImage from '../MajorHeaderImage/MajorHeaderImage';
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500  4) import JobsList from '../JobsList/JobsList';
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500  5) import { testMajors } from '../../views/ResultsView/testMajors';
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500  6) import { ProgressBar } from '../ProgressBar/ProgressBar';
cc40b82b (Ryan Perry 2024-11-13 18:09:44 -0500  7) 
cc40b82b (Ryan Perry 2024-11-13 18:09:44 -0500  8) const TopMajors = ({ majors }) => {
cc40b82b (Ryan Perry 2024-11-13 18:09:44 -0500  9)     return (
22ee7502 (Ryan Perry 2024-11-13 18:13:31 -0500 10)         <div>
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 11)             {majors.map((majorObj, index) => {
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 12)                 // Look up the major in the testMajors array
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 13)                 const majorInfo = testMajors.find(m => m.name === majorObj.title);
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 14)                 
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 15)                 // Get the description or default text
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 16)                 const description = majorInfo ? majorInfo.description : "Description not available";
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 17)                 
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 18)                 // Get the progress percentage from majorObj
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 19)                 const progress = majorObj.progress || 0;
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 20) 
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 21)                 return (
22ee7502 (Ryan Perry 2024-11-13 18:13:31 -0500 22)                     <div key={index}>
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 23)                         <hr className="solid" />
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 24)                         <h1 className="major-title">#{index + 1} {majorObj.title}</h1>
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 25)                         <MajorHeaderImage major={{ name: majorObj.title || 
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 26)                               "Unknown Major" }} />
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 27)                         <p style={{fontSize: '20px'}}>
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 28)                             We estimate that you have completed <b>{progress}%</b> of
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 29)                             the required courses for <b>{majorObj.title}</b>.
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 30)                         </p> 
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 31)                         <ProgressBar progress={majorObj.progress || 0} />
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 32)                         <p className="major-description">{description}</p>
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 33)                         <JobsList majorname={majorObj.title} />
22ee7502 (Ryan Perry 2024-11-13 18:13:31 -0500 34)                     </div>
22ee7502 (Ryan Perry 2024-11-13 18:13:31 -0500 35)                 );
22ee7502 (Ryan Perry 2024-11-13 18:13:31 -0500 36)             })}
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 37)         </div>
cc40b82b (Ryan Perry 2024-11-13 18:09:44 -0500 38)     );
cc40b82b (Ryan Perry 2024-11-13 18:09:44 -0500 39) }
cc40b82b (Ryan Perry 2024-11-13 18:09:44 -0500 40) 
cc40b82b (Ryan Perry 2024-11-13 18:09:44 -0500 41) export default TopMajors;
9704e8b8 (Ryan Perry 2024-11-13 19:37:01 -0500 42) 

/alternate-career-planner/src/views/CourseHistoryView/CourseHistory.css
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  1) /* CourseHistory.ccs
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  2)  * Description: CSS styling for course history view.
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  3)  */
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  4) 
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  5) .Split {
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  6)     display: flex;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  7)     width: 100%;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  8)     margin: 0 auto;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  9) }
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 10) 
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 11) .Sidebar {
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 12)     height: 100vh;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 13)     min-height: 100vh;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 14)     overflow-y: auto;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 15)     background-color: #F9F9F9;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 16)     width: 33%;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 17)     position: sticky;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 18)     top: 0;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 19)     padding: 20px;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 20) }
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 21) 
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 22) /* Hide scrollbar for WebKit browswers (Chrome, Safari)*/
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 23) .Sidebar::-webkit-scrollbar {
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 24)     display: none;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 25) }
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 26) 
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 27) .mainContent {
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 28)     width: 67%;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 29)     padding: 20px;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 30) }
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 31) 
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 32) .Title {
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 33)     padding-left: 20px;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 34)     color: #0f0d0a;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 35) }
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 36) 
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 38)     padding-left: 20px;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 39)     color: #0f0d0a;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 40)     cursor: pointer;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 41) }
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 42) 
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 43) .Header.active {
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 44)     font-weight: bold;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 45) }
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 46) 
7206919b (Ryan Perry       2024-11-13 16:52:57 -0500 47) ul.History {
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 48)   list-style: none;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 49) }
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 50) 
7206919b (Ryan Perry       2024-11-13 16:52:57 -0500 51) li.Header {
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 52)   display: inline-block;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 53)   margin-right: 10px;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 54)   font-size: 22px;

/alternate-career-planner/src/views/CourseHistoryView/CourseHistory.js
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  1) /* CourseHistory.js
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  2)  * Description: Displays the user's course history.
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  3)  */
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500  4) 
cc40b82b (Ryan Perry       2024-11-13 18:09:44 -0500  8) import TopMajors from '../../components/TopMajors/TopMajors';
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 12)     const [selectedFilter, setSelectedFilter] = useState("All");
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 21)     const handleFilterChange = (filter) => {
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 22)         setSelectedFilter(filter);
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 23)     };
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 24) 
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 25)     const filteredCourses = courses.filter(course => {
3bece526 (Ryan Perry       2024-11-13 19:41:01 -0500 26)         if (selectedFilter === "In Progress") {
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 27)           return course.grade === "IP";
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 28)         } else if (selectedFilter === "Completed") {
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 29)           return course.grade !== "IP";
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 30)         }
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 31)         return true;
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 32)     });
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 33) 
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 34)     /* Replace with top majors from backend */
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 35)     const topMajors = [
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 36)         { title: 'Computer Science', progress: 65 },
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 37)         { title: 'Computer Engineering', progress: 50},
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 38)         { title: 'Electrical Engineering', progress: 35}
9704e8b8 (Ryan Perry       2024-11-13 19:37:01 -0500 39)     ];
cc40b82b (Ryan Perry       2024-11-13 18:09:44 -0500 40) 
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 42)         <div className="Split">
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 43)             <div className="Sidebar">
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 44)                 <h1 className="Title">Courses</h1>
cc40b82b (Ryan Perry       2024-11-13 18:09:44 -0500 46)                     <li className={`Header ${selectedFilter === "All" ? 
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 47)                                                 "active" : ""}`}
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 48)                         onClick={() => handleFilterChange("All")}
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 49)                     >
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 50)                         All 
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 51)                     </li>
3bece526 (Ryan Perry       2024-11-13 19:41:01 -0500 52)                     <li className={`Header ${selectedFilter === "In Progress" ? 
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 53)                                                 "active" : ""}`}
3bece526 (Ryan Perry       2024-11-13 19:41:01 -0500 54)                         onClick={() => handleFilterChange("In Progress")}
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 55)                     >
3bece526 (Ryan Perry       2024-11-13 19:41:01 -0500 56)                         In Progress 
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 57)                     </li>
cc40b82b (Ryan Perry       2024-11-13 18:09:44 -0500 58)                     <li className={`Header ${selectedFilter === "Completed" 
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 59)                                                 ? "active" : ""}`}
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 60)                         onClick={() => handleFilterChange("Completed")}
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 61)                     >
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 62)                         Completed 
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 63)                     </li>
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 64)                 </ul>
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 65)                 <table>
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 66)                     <th colSpan={2}>
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 67)                         <CourseHistory courses = {filteredCourses}/>
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 68)                     </th>
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 69)                 </table>
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 70)             </div>
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 71) 
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 72)             <div className="mainContent">
f1ad8336 (Ryan Perry       2024-11-13 16:41:10 -0500 73)                 <h1>Top Majors for You</h1>
f1ad8336 (Ryan Perry       2024-11-13 16:41:10 -0500 74)                 <p>
f1ad8336 (Ryan Perry       2024-11-13 16:41:10 -0500 75)                     These majors have the most course overlap with your
f1ad8336 (Ryan Perry       2024-11-13 16:41:10 -0500 76)                     academic history.
f1ad8336 (Ryan Perry       2024-11-13 16:41:10 -0500 77)                 </p>
cc40b82b (Ryan Perry       2024-11-13 18:09:44 -0500 78)                 <TopMajors majors={topMajors}/>
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 79)             </div>
b19878c3 (Ryan Perry       2024-11-13 16:05:35 -0500 80) 

/alternate-career-planner/src/views/Home/Home.js
d3cd12da (Ryan Perry       2024-11-13 16:26:47 -0500  93)                             View Top Majors

/alternate-career-planner/src/views/Quiz/Quiz.css
bb64cd58 (Ryan Perry       2024-11-13 19:50:03 -0500 28)     width: 100%;
bb64cd58 (Ryan Perry       2024-11-13 19:50:03 -0500 32)     font-size: 22px;
